# Create a special matrix object that can cache its inverse
makeCacheMatrix <- function(x) {
  inv <- NULL
  
  set <- function(y) {
    x <<- y
    inv <<- NULL
  }
  
  get <- function() {
    x
  }
  
  setInverse <- function(inverse) {
    inv <<- inverse
  }
  
  getInverse <- function() {
    inv
  }
  
  list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}

# Compute the inverse of the matrix (caching the result if possible)
cacheSolve <- function(x) {
  inv <- x$getInverse()
  
  # If the inverse is already cached, return it
  if (!is.null(inv)) {
    message("Retrieving cached inverse.")
    return(inv)
  }
  
  # Otherwise, compute the inverse
  mat <- x$get()
  inv <- solve(mat)
  
  # Cache the computed inverse
  x$setInverse(inv)
  
  inv
}
